## Caddyfile configuration sample
## location: /etc/caddy/Caddyfile
## caddy reload --config /etc/caddy/Caddyfile
(security_headers) {
    header * {
        # enable HSTS
        # https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html#strict-transport-security-hsts
        # NOTE: Read carefully how this header works before using it.
        # If the HSTS header is misconfigured or if there is a problem with
        # the SSL/TLS certificate being used, legitimate users might be unable
        # to access the website. For example, if the HSTS header is set to a
        # very long duration and the SSL/TLS certificate expires or is revoked,
        # legitimate users might be unable to access the website until
        # the HSTS header duration has expired.
        # The recommended value for the max-age is 2 year (63072000 seconds).
        # But we are using 1 hour (3600 seconds) for testing purposes
        # and ensure that the website is working properly before setting
        # to two years.
 
        Strict-Transport-Security "max-age=3600; includeSubDomains; preload"
 
        # disable clients from sniffing the media type
        # https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html#x-content-type-options
        X-Content-Type-Options "nosniff"
 
        # clickjacking protection
        # https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html#x-frame-options
        X-Frame-Options "DENY"
 
        # xss protection
        # https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html#x-xss-protection
        X-XSS-Protection "1; mode=block"
 
        # Remove -Server header, which is an information leak
        # Remove Caddy from Headers
        -Server
 
        # keep referrer data off of HTTP connections
        # https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html#referrer-policy
        Referrer-Policy strict-origin-when-cross-origin
    }
}
{
	servers {
		metrics
		protocols h1 h2 h3
	}
  	log default {
		output stdout
		format json
		include http.log.access admin.api
	}
	cert_lifetime 180d
	##auto_https disable_redirects
}
(log_file) {
  log {
    format filter {
      wrap console
      fields {
        request>headers>User-Agent delete
      }
    }
    output file /var/log/caddy/{args[0]}.access.log {
       roll_size 10mb
       roll_keep 3
       roll_keep_for 7d    
      }
  }
}
gh.luzy.top {
  import log_file gh
  reverse_proxy * localhost:7703
}
:80 {
	redir :443{uri}
}

# Refer to the Caddy docs for more information:
# https://caddyserver.com/docs/caddyfile
<domain> {

	header {
		alt-svc h3=":443", ma=2592000
	}
	route /sample/* {
		root * /usr/share/caddy
		file_server
	}
	route /share/* {
		uri strip_prefix /share
		reverse_proxy localhost:3333
	}
	handle /kick/* {
		uri strip_prefix /kick
		reverse_proxy localhost:9000

}
https://example.com {
   reverse_proxy /path http://localhost:54321 {
      header_up Host {http.reverse_proxy.upstream.hostport} 
      header_down Access-Control-Allow-Headers * 
      header_down Access-Control-Allow-Origin *
   }
}
